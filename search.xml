<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[爬虫入门]]></title>
    <url>%2F2019%2F02%2F12%2F%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[什么是爬虫请求网站并爬取数据的自动化程序 POST与GET请求的区别 GET请求包含在URL(统一资源定位符)里 POST是在表单中的，请求参数不包含在URL后 抓什么样的数据 网页文本（HTML，JSON) 图片——二进制流123456#抓取网页图片import requestsresonse = requests.get(&apos;https://www.baidu.com/img/baidu_jgylogo3.gif&apos;)with open(&apos;1.gif&apos;, &apos;wb&apos;) as f: f.write(response.content) f.close() 网页解析怎样提取数据 直接处理（返回内容简单） Json解析 正则表达式 BeautifulSoup PyQuery XPath 解决JavaScript渲染的问题 分析Ajax请求 Selenium/WebDriver 保存数据 文本 关系型数据库 非关系型数据库 二进制文件 urllib库 Python内置的HTTP请求库包括以下几个模块：requesterrorparserobotparser–判断哪些网站可以爬get12345import urllib.requestresponse = urllib.request.urlopen(&apos;www.baidu.com&apos;)print(response.read().decode(&apos;utf-8&apos;))#read()获取响应体的内容,字节流形式的数据#decode转换成字符串 post12345678910111213&gt;&gt;&gt; import urllib.parse&gt;&gt;&gt; import urllib.request&gt;&gt;&gt;&gt;&gt;&gt; # post类型的请求...&gt;&gt;&gt; data = bytes(urllib.parse.urlencode(&#123;&apos;word&apos;: &apos;hello&apos;&#125;), encoding=&apos;utf-8&apos;)&gt;&gt;&gt; response = urllib.request.urlopen(&apos;http://httpbin.org/post&apos;, data=data)&gt;&gt;&gt; print(response.readresponse.read( response.readall( response.readline(response.readable( response.readinto( response.readlines(&gt;&gt;&gt; print(response.read())b&apos;&#123;\n &quot;args&quot;: &#123;&#125;, \n &quot;data&quot;: &quot;&quot;, \n &quot;files&quot;: &#123;&#125;, \n &quot;form&quot;: &#123;\n &quot;word&quot;: &quot;hello&quot;\n &#125;, \n &quot;headers&quot;: &#123;\n &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n &quot;Content-Length&quot;: &quot;10&quot;, \n &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, \n &quot;Host&quot;: &quot;httpbin.org&quot;, \n &quot;User-Agent&quot;: &quot;Python-urllib/3.4&quot;\n &#125;, \n &quot;json&quot;: null, \n &quot;origin&quot;: &quot;113.231.208.222, 113.231.208.222&quot;, \n &quot;url&quot;: &quot;https://httpbin.org/post&quot;\n&#125;\n&apos;&gt;&gt;&gt; #输出json字符串 超时1234567&gt;&gt;&gt; try:... response = urllib.request.urlopen(&apos;http://httpbin.org/get&apos;, timeout=0.)... except urllib.error.URLError as e:... if isinstance(e.reason, socket.timeout):... print(&apos;TIME OUT&apos;)...TIME OUT 响应 响应类型：123&gt;&gt;&gt; response = urllib.request.urlopen(&apos;http://www.python.org&apos;)pri&gt;&gt;&gt; print(type(response))&lt;class &apos;http.client.HTTPResponse&apos;&gt; response里包含了两个重要的信息——状态码，响应头（判断响应是否成功的标志）使用getheader()获取响应头，使用status获取状态码1234567&gt;&gt;&gt; print(response.status)200&gt;&gt;&gt; print(response.getheaders())[(&apos;Server&apos;, &apos;nginx&apos;), (&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;), (&apos;X-Frame-Options&apos;, &apos;SAMEORIGIN&apos;), (&apos;x-xss-protection&apos;, &apos;1; mode=block&apos;), (&apos;X-Clacks-Overhead&apos;, &apos;GNU Terry Pratchett&apos;), (&apos;Content-Length&apos;, &apos;49296&apos;), (&apos;Accept-Ranges&apos;, &apos;bytes&apos;), (&apos;Date&apos;, &apos;Sun, 24 Feb 2019 03:06:07 GMT&apos;), (&apos;Via&apos;, &apos;1.1 varnish&apos;), (&apos;Age&apos;, &apos;261&apos;), (&apos;Connection&apos;, &apos;close&apos;), (&apos;X-Served-By&apos;, &apos;cache-nrt6134-NRT&apos;), (&apos;X-Cache&apos;, &apos;HIT&apos;), (&apos;X-Cache-Hits&apos;, &apos;164&apos;), (&apos;X-Timer&apos;, &apos;S1550977567.278742,VS0,VE0&apos;), (&apos;Vary&apos;, &apos;Cookie&apos;), (&apos;Strict-Transport-Security&apos;, &apos;max-age=63072000; includeSubDomains&apos;)]&gt;&gt;&gt; print(response.getheader(&apos;Server&apos;))nginx&gt;&gt;&gt; request123&gt;&gt;&gt; request = urllib.request.Request(&apos;https://python.org&apos;)&gt;&gt;&gt; response = urllib.request.urlopen(request)&gt;&gt;&gt; print(response.read().decode(&apos;utf-8&apos;)) 与之前直接使用urlopen()的效果是一样的]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux课上题]]></title>
    <url>%2F2018%2F04%2F24%2FLinux%E8%AF%BE%E4%B8%8A%E9%A2%98%2F</url>
    <content type="text"><![CDATA[题目要求 编写一个脚本文件checkuser,该脚本运行时带一个用户名作为参数，在/etc/passwd文件中查找是否有该用户，如果有，则输出＂Found＂,否则输出＂No ＂ 代码实现12345678910for i in $*do a=`grep $i /etc/passwd` if [ -z &quot;$a&quot; ] then echo &quot;No such &lt;$i&gt;&quot; else echo &quot;Found &lt;$i&gt;&quot; fidone]]></content>
      <categories>
        <category>shell小程序</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux课上题]]></title>
    <url>%2F2018%2F04%2F24%2FLinux%2F</url>
    <content type="text"><![CDATA[题目要求 编写一个脚本文件checkuser,该脚本运行时带一个用户名作为参数，在/etc/passwd文件中查找是否有该用户，如果有，则输出＂Found＂,否则输出＂No ＂ 代码实现12345678910for i in $*do a=`grep $i /etc/passwd` if [ -z &quot;$a&quot; ] then echo &quot;No such &lt;$i&gt;&quot; else echo &quot;Found &lt;$i&gt;&quot; fidone]]></content>
      <categories>
        <category>shell小程序</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习（四）]]></title>
    <url>%2F2018%2F04%2F02%2FLinux%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Linux下的帮助命令内建命令和外建命令 内建命令：是shell程序中的一部分，解析内部命令时shell不需要创建子进程，执行速度比外部命令块．外部命令：在需要时才将其调入内存，由shell控制，如ls,vi…可以使用type来区分命令 几种帮助命令help使用help cd来查看cd命令的用法,当使用help来查看外部命令时不会显示信息–help用于查看外部信息 manman内建命令，外部命令都可以显示图中LS()为章节1代表标准命令 infoinfo比man更加完整]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习（三）]]></title>
    <url>%2F2018%2F03%2F16%2FLinux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[文件打包与压缩zip打包1zip -r -q -o test.zip /home/... //将/home/...打包成一个文件 -r: 递归打包，包含子目录的全部内容-q:不向屏幕输出信息-o:输出文件1zip -r -9 -o a.zip /home/... -x ~/*.zip ０－９代表级别，９是压缩为最小包 耗时最长 路径只能使用绝对路径表示 -x表示排除.zip文件1du -h -d 0 *.zip ~|sort //查看文件深度和大小 -h:查看文件深度-e:加密压缩包123unzip ...zip -d test //解压到test目录unzip -l test.zip //查看test.zip的内容unzip -O GBK 中.zip //指定编码类型 rar打包从指定文件或目录创建压缩包或添加文件到压缩包rar参数中没有＂－＂rar命令举例：123rar d test.rar del //从压缩包中删除某个文件rar l test.rar //查看但不解压unrar x test.rar //全路径解压 去掉路径解压：12mkdir tmp unrar e test.rar tmp/ //去掉路径解压 tar打包Linux 更常用tar工具12tar -cf test.tar ~ //不进行压缩，只创建归档文件tar -f test.tar -c ~ //和上面等效 -c:创建一个tar文件 文件操作系统与磁盘管理查看磁盘和目录的容量 使用df命令查看磁盘容量默认以block大小展示/dev/sda2表示主机硬盘的分区，数字表示分区号，a表示第几块硬盘-h提高可读性 使用du命令查看目录容量1du -h -d 0 ~ //查看一级目录信息 -a:显示目录中所有文件的大小-s:总计，之列出最后加总的值 简单的磁盘管理－－ 创建虚拟磁盘使用dd创建镜像文件使用dd来转换和复制文件，可以用在备份硬件的引导扇区，获取一定数量的随机数据，也可以在复制时处理数据首先对dd有一个了解：12345 dd of=test bs=10 count=1//of : 输出文件//if : 输入文件//bs : block size 指定块大小，10个字节//count : 指定块数量 创建镜像文件：12dd if=/dev/zero of=virtual.img bs=1M count=256du -h virtual.img 从/dev/zero 设备创建一个容量为２５６Ｍ 的空文件 使用mkfs格式化磁盘1sudo mkfs.ext4 virtual.img //进行格式化 使用mount挂载磁盘到目录树mount: 通常使用在USB或其他可移除设备上，而根目录始终保持挂载的状态；mount告诉操作系统对应的文件系统已经准备好了，文件系统会对应到一个挂载点sudo mount 设备名 on 挂载点 type 文件类型12345mount -o loop -t ext4 virtual.img /mnt# loop 挂载类型mount -o loop -ro virtual.img /mnt//以只读方式运行 12sudo umount /mnt//卸载已挂载磁盘 使用fdisk为磁盘分区查看磁盘分区：sudo fdisk -l,显示扇区数，扇区大小，I/O大小…12sudo fdisk virtual.img//进入磁盘分区模式 使用loseup创建镜像与回环设备的关联1sudo loseup /dev/loop0 virtual.img 删除设备关联使用sudo loseup -d /dev/loop0 使用kpartx为各分区建立虚拟设备的映射1sudo kpartx -av /dev/loop0 取消映射：sudo kpartx -dv /dev/loop0 格式化将其个格式化为ext４：1sudo mkfs.ext4 -1 /dev/mapper/loop0p1 创建空目录挂载虚拟磁盘12mkdir -p /media/virtualdisk_&#123;1..3&#125;sudo mount /dev/mapper/loop0p1 /media/virtualdisk_1 最后df -h查看]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bazinga]]></title>
    <url>%2F2018%2F03%2F13%2FnewFile%2F</url>
    <content type="text"><![CDATA[Hey man.]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>one</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习（二）]]></title>
    <url>%2F2018%2F03%2F09%2FLinux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Bash简单入门在后面有用到Bash和shell，所以先看一点相关的东西 Shell:命令解释器，是一种解释性语言，也成为脚本语言 Shell编程：可以使用vim,gedit来创建shell程序 gedit hello.sh //创建shell程序#!/bin/bash //#!用来说明文件类型，表示为需要由bin目录下的bash程序来解释echo “hello world”sh hello.sh //当使用 ./ 来进行执行时需要对文件的可执行权限进行修改 效果如下也可以使用bash/./source来执行程序 环境变量与文件查找变量 变量（shell变量）：计算机中用于计算一个值的符号，可以用于不同的运算处理当中．一个范围内只能由一个同名变量． declare temptemp=SJQecho $temp以上代码为声明变量和显示变量值，也可以不使用 declare 直接对变量进行赋值，效果如下 环境变量：作用域比自定义变量的大（如shell的环境变量作用于自身和它的子进程）变量分为三种类型：1.当前shell进程私有的用户自定义变量；2.shell本身内建的变量；3.从自定义变量导出的环境变量 有关变量的一些命令 set: 显示当前shell的所有变量 env: 显示与当前用户相关的环境变量，也可以让命令在指定环境中运行 export: 显示从shell中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量（环境变量通常为大写） zsh //创建自shell如果不是环境变量，将无法使用该变量，需要使用export来使该变量变为环境变量如果需要将变量变为永久的扮靓，需要修改配置文件．在这里知道了两个相关的文件：/etc/bashrc和/ect/profile，它们两个分别存放shell变量和环境变量 添加自定义路径到”PATH”环境变量： PATH=$PATH:home/…(绝对路径)使用这种方法，在退出终端后失效PATH以：作为分隔符 修改和删除已有变量：输入 作用${变量名#匹配字符从前到后删除最短数据 ${变量名##匹配字符}从前到后删除最长数据${变量名%匹配字符}从后到前删除最短数据${变量名%%匹配字符}从后到前删除最长数据${变量名/旧字符串/新字符串}将第一个旧字符串换为新字符串${变量名//旧字符串/新字符串}将全部旧字符串换为新字符串unset 变量名 删除变量 文件查找 whereis: 快速 locate: 快 全 locate /etc/sh：查找/etc下所有sh开头的文件locate /usr/share/*.jpg : 查找所有jpg文件-c统计数目 －i忽略大小写 which：小而快速，只从PATH环境变量指向的路径去搜索指令 find: 精而细． find [path][option][action]]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习]]></title>
    <url>%2F2018%2F03%2F07%2FLinux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[目录结构图片转自实验楼 目录路径使用cd切换目录;.表示当前目录;..表示上一级目录;使用cd ~进入当前用户的home目录，也可以使用”cd /home/用户名”来进入使用pwd来获取当前路径，如下图 创建文件及目录新建空白文件： touch 文件名新建目录： mkdir 目录名（使用-p可以创建不存在的父目录）创建多个文件： touch file{1..5}.txt复制文件： cp 文件名 目的目录复制整个目录： cp -r(或者－R) 目录名 目的目录名 删除文件及目录使用 rm 删除文件使用rm -f 强制删除文件无法使用rm删除目录，应使用rm -r删除目录效果图如下所示 移动文件与文件重命名移动文件： mv 源目录文件 目的目录重命名： mv 旧文件名 新文件名批量重命名： rename ‘s/.txt/.c’*.txt 表示将.txt后缀改为.c 查看文件使用cat查看文件，效果如下图 加入 -n 显示行号 使用more显示一屏文件,键入ENTER显示下一行，键入space显示下一屏 可以使用tail和head显示后面几行和前面几行的文件，添加 -n 2表示显示行数，效果图如下所示]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F02%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
